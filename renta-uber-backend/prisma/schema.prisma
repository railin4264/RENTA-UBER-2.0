// This is your Prisma schema file, 
// learn more about it in the docs: https://pris.ly/d/prisma-schema 
 
generator client { 
  provider = "prisma-client-js" 
} 
 
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User { 
  id        String   @id @default(cuid())
  email     String   @unique 
  password  String   
  firstName String
  lastName  String
  role      String   @default("user") 
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 
} 

model Status {
  id        String   @id @default(cuid())
  name      String
  module    String
  color     String?
  createdAt DateTime @default(now())
  
  // Relations
  drivers     Driver[]
  vehicles    Vehicle[]
  contracts   Contract[]
}

model Driver {
  id              String   @id @default(cuid())
  photo           String?
  firstName       String
  lastName        String
  cedula          String
  cedulaPhoto     String?
  license         String
  licensePhoto    String?
  licenseExpiry   String?
  startDate       DateTime?
  address         String?
  googleMapsLink  String?
  phone           String
  email           String?
  workplace       String?
  emergencyContact String?
  emergencyPhone  String?
  salary          Float?
  commission      Float?
  notes           String?
  documents       String?
  createdAt       DateTime @default(now())
  
  // Relations
  statusId      String?
  status        Status?  @relation(fields: [statusId], references: [id])
  guarantors    Guarantor[]
  payments      Payment[]
  contracts     Contract[]
  debtRecords   DebtRecord[]
}

model Guarantor {
  id             String   @id @default(cuid())
  driverId       String
  photo          String?
  firstName      String
  lastName       String
  cedula         String
  cedulaPhoto    String?
  address        String
  googleMapsLink String?
  workplace      String
  phone          String
  createdAt      DateTime @default(now())
  
  // Relations
  driver         Driver   @relation(fields: [driverId], references: [id], onDelete: Restrict)
}

model Vehicle {
  id                    String   @id @default(cuid())
  brand                 String?
  model                 String
  year                  Int?
  color                 String?
  plate                 String   @unique
  vin                   String?
  engine                String?
  transmission          String?
  fuelType              String?
  mileage               Int?
  lastMaintenance       String?
  nextMaintenance       String?
  insuranceExpiry       String?
  registrationExpiry    String?
  purchaseDate          String?
  purchasePrice         Float?
  currentValue          Float?
  photos                String?
  generalPhoto          String?
  currentConditionPhotos String?
  notes                 String?
  documents             String?
  createdAt             DateTime @default(now())
  
  // Relations
  statusId              String?
  status                Status?  @relation(fields: [statusId], references: [id])
  expenses              Expense[]
  contracts             Contract[]
}

model Expense {
  id            String   @id @default(cuid())
  vehicleId     String
  category      String   // maintenance, fuel, insurance, repairs, tires, other
  amount        Float
  description   String?
  date          DateTime
  vendor        String?
  invoiceNumber String?
  paymentMethod String?  // cash, bank_transfer, credit_card, debit_card
  status        String?  // pending, paid, cancelled
  notes         String?
  createdAt     DateTime @default(now())
  
  // Relations
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Restrict)
}

model Payment {
  id           String   @id @default(cuid())
  contractId   String?
  driverId     String
  amount       Float
  type         String   // payment, deposit, penalty, refund
  method       String?  // cash, bank_transfer, credit_card, debit_card, mobile_payment
  status       String?  // pending, completed, failed, cancelled
  date         DateTime
  dueDate      String?
  description  String?
  reference    String?
  notes        String?
  createdAt    DateTime @default(now())
  
  // Relations
  driver       Driver   @relation(fields: [driverId], references: [id], onDelete: Restrict)
  contract     Contract? @relation(fields: [contractId], references: [id])
}

enum ContractType {
  DAILY
  MONTHLY
  CUSTOM
}

model Contract {
  id               String        @id @default(cuid())
  tenantId         String?       // optional tenant support
  driverId         String
  vehicleId        String
  startDate        DateTime
  endDate          DateTime?
  type             ContractType @default(DAILY)
  basePrice        Float?
  dailyPrice       Float?
  monthlyPrice     Float?
  deposit          Float?
  penaltyRate      Float?        // e.g. 0.05 for 5%
  allowedDelayDays Int?          @default(0)
  automaticRenewal Boolean?      @default(false)
  terms            String?
  notes            String?
  createdBy        String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  driver           Driver        @relation(fields: [driverId], references: [id], onDelete: Restrict)
  vehicle          Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: Restrict)
  statusId         String?
  status           Status?       @relation(fields: [statusId], references: [id])
  payments         Payment[]
}

model DebtRecord {
  id               String   @id @default(cuid())
  driverId         String
  vehiclePlate     String
  amount           Float
  dueDate          DateTime
  status           String?  // pending, paid
  isVehicleInactive Boolean?
  notes            String?
  createdAt        DateTime @default(now())
  
  // Relations
  driver           Driver   @relation(fields: [driverId], references: [id], onDelete: Restrict)
}

model Report {
  id          String   @id @default(cuid())
  title       String
  description String
  data        Json
  createdAt   DateTime @default(now())
}
