generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
}

model Status {
  id        String   @id @default(uuid())
  name      String   // Ej: 'activo', 'inactivo', 'disponible', etc.
  module    String   // Ej: 'driver', 'vehicle', 'contract', etc.
  color     String?  // Para mostrar en el frontend (opcional)
  createdAt DateTime @default(now())

  drivers    Driver[]
  vehicles   Vehicle[]
  contracts  Contract[]
  payments   Payment[]
  debts      DebtRecord[]
  expenses   Expense[]
}

model Driver {
  id             String       @id @default(uuid())
  photo          String?
  firstName      String
  lastName       String
  cedula         String?
  cedulaPhoto    String?
  license        String
  licensePhoto   String?
  startDate      DateTime?
  address        String?
  googleMapsLink String?
  phone          String
  workplace      String?
  vehicleId      String?
  statusId       String?      // Relaci√≥n con Status
  status         Status?      @relation(fields: [statusId], references: [id])
  createdAt      DateTime     @default(now())
  payments       Payment[]
  contracts      Contract[]
  guarantors     Guarantor[]
  debtRecords    DebtRecord[]
  vehicles       Vehicle[]    @relation("DriverVehicles")
}

model Vehicle {
  id            String     @id @default(uuid())
  model         String
  year          Int?
  color         String?
  plate         String     @unique
  driverId      String?
  statusId      String?
  photoFront    String?
  photoRear     String?
  photoLeft     String?
  photoRight    String?
  photoInterior String?
  photoEngine   String?
  createdAt     DateTime   @default(now())

  // Relaciones:
  contracts     Contract[]
  expenses      Expense[]  @relation("VehicleExpenses")
  driver        Driver?    @relation("DriverVehicles", fields: [driverId], references: [id])
  status        Status?    @relation(fields: [statusId], references: [id])
}

model Guarantor {
  id             String   @id @default(uuid())
  driverId       String
  photo          String?
  firstName      String
  lastName       String
  cedula         String
  cedulaPhoto    String?
  address        String
  googleMapsLink String?
  workplace      String
  phone          String
  createdAt      DateTime @default(now())
  driver         Driver   @relation(fields: [driverId], references: [id])
}

model DebtRecord {
  id                String   @id @default(uuid())
  driverId          String
  vehiclePlate      String
  amount            Float
  dueDate           DateTime
  statusId          String?
  isVehicleInactive Boolean?
  notes             String?
  createdAt         DateTime @default(now())
  driver            Driver   @relation(fields: [driverId], references: [id])
  status            Status?  @relation(fields: [statusId], references: [id])
}

model Payment {
  id         String   @id @default(uuid())
  amount     Float
  date       DateTime
  driverId   String
  type       String?  // Ej: 'complete', 'partial'
  dailySavings Float?
  notes      String?
  statusId   String?
  createdAt  DateTime @default(now())
  driver     Driver   @relation(fields: [driverId], references: [id])
  status     Status?  @relation(fields: [statusId], references: [id])
}
model Contract {
  id           String   @id @default(uuid())
  startDate    DateTime
  endDate      DateTime
  driverId     String
  vehicleId    String
  statusId     String?
  type         String?      // <--- Agregado
  driverName   String?      // <--- Agregado
  vehiclePlate String?      // <--- Agregado
  driver       Driver   @relation(fields: [driverId], references: [id])
  vehicle      Vehicle  @relation(fields: [vehicleId], references: [id])
  status       Status?  @relation(fields: [statusId], references: [id])
}

model Report {
  id          String   @id @default(uuid())
  title       String
  description String
  data        Json
  createdAt   DateTime @default(now())
}

model Expense {
  id          String   @id @default(uuid())
  amount      Float
  date        DateTime
  description String?
  vehicleId   String
  statusId    String?
  vehicle     Vehicle  @relation("VehicleExpenses", fields: [vehicleId], references: [id])
  type        String?
  place       String?
  invoice     String?
  status      Status?  @relation(fields: [statusId], references: [id])
}